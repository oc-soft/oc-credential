%{
#include "client_id.h"
#include <stddef.h>
#include <string.h>
#include <stdlib.h>
#include <errno.h>
typedef struct _uri_client_id uri_client_id;

/**
 * find client id entry by name
 */
static uri_client_id*
in_word_set(
    const char* name,
    size_t length);
%}
%struct-type
%compare-lengths
struct _uri_client_id {
    const char* name;
    const char* client_id;
};
%%
@URI_CLIENT_ENTRIES@
%%
/**
 * get client id
 */
const char*
client_id_get(
    const char* protocol,
    const char* host,
    const char* path)
{
    const char* result;
    result = NULL;

    if (protocol) {
        const uri_client_id* entry;
        char* buffer;
        size_t protocol_len;
        size_t host_len;
        size_t path_len;
        size_t buffer_size;
        entry = NULL;
        buffer = NULL;
        protocol_len = strlen(protocol);
        if (host) {
            host_len = strlen(host); 
        } else {
            host_len = 0; 
        }
        buffer_size = protocol_len + 3 + host_len;
        if (path) {
            path_len = strlen(path);
            buffer_size += 1 + path_len;
        } else {
            path_len = 0;
        }
        buffer = malloc(buffer_size);
        if (buffer) {
            char* ptr;
            ptr = buffer;
            memcpy(ptr, protocol, protocol_len);
            ptr += protocol_len;
            memcpy(ptr, "://", 3);
            ptr += 3;
            memcpy(ptr, host, host_len);
            ptr += host_len;
            if (path) {
                memcpy(ptr, "/", 1);
                ptr += 1; 
                memcpy(ptr, path, path_len);
            }
            entry = in_word_set(buffer, buffer_size);
        }
        
        if (entry) {
            result = entry->client_id;
        }
        if (buffer) {
            free(buffer);
        }
    } else {
        errno = EINVAL;
    }
    return result;
}

/* vi: se ts=4 sw=4 et: */
