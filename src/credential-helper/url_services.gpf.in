%{
#include "url_services.h"
#include <string.h>
#include <errno.h>
#include <stdlib.h>
/**
 * url services entry
 */
typedef struct _url_services url_services;

/**
 * find groups by url
 */
static url_services*
in_word_set(
    const char* url,
    size_t length);

%}
%struct-type
%compare-lengths
%define slot-name url
struct _url_services {
    /**
     * url
     */
    const char* url;
    /**
     * services 
     */
    const char** services;
    /**
     * services size
     */
    size_t services_size;
};
!SERVICES!
%%
!URL_SERVICES_ENTRIES!
%%

/**
 * get services
 */
int
url_services_get(
    const char* protocol,
    const char* host,
    const char* path,
    const char*** services,
    size_t* services_size)
{
    int result;
    result = 0;

    if (protocol) {
        char* buffer;
        size_t protocol_len;
        size_t host_len;
        size_t path_len;
        size_t buffer_size;
        url_services* entry;
        entry = NULL;
        buffer = NULL;
        protocol_len = strlen(protocol);
        if (host) {
            host_len = strlen(host); 
        } else {
            host_len = 0; 
        }
        buffer_size = protocol_len + 3 + host_len;
        if (path) {
            path_len = strlen(path);
            buffer_size += 1 + path_len;
        } else {
            path_len = 0;
        }
        buffer = malloc(buffer_size);
        if (buffer) {
            char* ptr;
            ptr = buffer;
            memcpy(ptr, protocol, protocol_len);
            ptr += protocol_len;
            memcpy(ptr, "://", 3);
            ptr += 3;
            memcpy(ptr, host, host_len);
            ptr += host_len;
            if (path) {
                memcpy(ptr, "/", 1);
                ptr += 1; 
                memcpy(ptr, path, path_len);
            }
            entry = in_word_set(buffer, buffer_size);
        }
        
        if (entry) {
            if (services) {
                *services = entry->services;
            }
            if (services_size) {
                *services_size = entry->services_size;
            }
            result = 0;
        } else {
            result = -1;
        }
        if (buffer) {
            free(buffer);
        }
    } else {
        errno = EINVAL;
        result = -1;
    }
    return result;
}

/* vi: se ts=4 sw=4 et: */
