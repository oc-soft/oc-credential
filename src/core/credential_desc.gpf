%{
#include "credential_desc.h"
#include <string.h>
#include <stdio.h>
#include <ctype.h>
#include "credential_i.h"
typedef struct _desc_name_offset desc_name_offset;

/**
 * set field
 */
static int
credential_desc_set_field_0(
    char** field,
    const char* value,
    size_t value_length); 

/**
 * find name offset
 */
static desc_name_offset*
credential_desc_name_offset_find(
    const char* name,
    size_t length);

/**
 * allocate credential descriptor
 */
credential_desc*
credential_desc_alloc();

/**
 * find start of line
 */
static const char*
credential_desc_find_start_of_line(
    const char* descliptor,
    size_t descriptor_length);
/**
 * find end of line
 */
static const char*
credential_desc_find_end_of_line(
    const char* descliptor,
    size_t descriptor_length);

%}
%struct-type
%define hash-function-name credential_desc_name_offset_hash
%define lookup-function-name credential_desc_name_offset_find
%compare-lengths
struct _desc_name_offset {
    const char* name;
    size_t offset;
};
%%
protocol, offsetof(credential_desc, protocol)
host, offsetof(credential_desc, host)
path, offsetof(credential_desc, path)
username, offsetof(credential_desc, username)
password, offsetof(credential_desc, password)
%%

/**
 * set value into credentail descriptor field 
 */
static int
credential_desc_set_field_by_name_0(
    credential_desc* desc,
    const char* name,
    size_t name_length,
    const char* value,
    size_t value_length)
{
    int result;
    const desc_name_offset* name_offset;
    result = 0;
    name_offset = credential_desc_name_offset_find(name, name_length);   
    if (name_offset) {
        result = credential_desc_set_field_0(
            (char**)((char*)desc + name_offset->offset),
            value, value_length);
    }
    return result;
}


/**
 * parse descriptor
 */
credential_desc*
credential_desc_decode(
    const char* descriptor,
    size_t descriptor_length)
{

    int state;
    credential_desc* result;
    
    result = credential_desc_alloc(); 
    state = result ? 0 : -1;
    if (state == 0) {
        const char* line;
        const char* line_end;
        size_t desc_len;
        line = descriptor;
        desc_len = descriptor_length;
        line_end = credential_desc_find_end_of_line(line, desc_len);
        state = line_end ? 0 : -1;
        if (state == 0) {
            desc_len -= (line_end - line);
        }
        if (state == 0) {
            while (1) {
                char* end_of_key;
                end_of_key = (char*)memchr(line, '=', line_end - line);
              
                if (end_of_key) {
                    const char* key;
                    const char* value;
                    size_t key_length;
                    size_t value_length;
                    key = line;
                    key_length = end_of_key - key; 
                    value = end_of_key + 1;
                    value_length = line_end - value;
                    state = credential_desc_set_field_by_name_0(
                        result, key, key_length,
                        value, value_length);
                    if (state) {
                        break;
                    } 
                } else {
                    break;
                }

                line = credential_desc_find_start_of_line(line_end, desc_len);
                if (line) {
                    desc_len -= (line - line_end);
                    line_end = credential_desc_find_end_of_line(line, desc_len);
                    if (line_end) {
                        desc_len -= (line_end - line);
                    } else {
                        break;
                    }
                } else {
                    break;
                }
            }
        }
    }
    if (state) {
        if (result) {
            credential_desc_free(result);
            result = NULL;
        }
    }
    return result;
}

/**
 * encode credential_desc into git descriptor format
 */
int
credential_desc_encode(
    const credential_desc* desc,
    char** descriptor,
    size_t* descriptor_length)
{
    struct {
        const char* format;
        const char* value;
    } format_values[] = {
        { "protocol=%s\n", desc->protocol },
        { "host=%s\n", desc->host },
        { desc->path ? "path=%s\n" : "%s", desc->path ? desc->path : "" },
        { "username=%s\n", desc->username },
        { "password=%s\n", desc->password },
        { desc->quit ? "quit=%s\n" : "%s", desc->quit ? "true" : "" }
    }; 
    const char* end_of_desc = "\n";
    size_t idx;
    size_t buffer_size;
    int result;
    char* descriptor_0;
    descriptor_0 = NULL;
    result = 0;
    buffer_size = 0;
    for (idx = 0;
        idx < sizeof(format_values) / sizeof(format_values[0]); idx++) {
        if (format_values[idx].value) {
            buffer_size += strlen(format_values[idx].format) - 2;
            buffer_size += strlen(format_values[idx].value);
        }
    }
    buffer_size += strlen(end_of_desc);
    descriptor_0 = (char*)credential_i_alloc(buffer_size + 1);
    result = descriptor_0 ? 0 : -1;
    if (result == 0) {
        char* str_ptr;
        size_t rest_of_buffer_size;
        str_ptr = descriptor_0;
        rest_of_buffer_size = buffer_size + 1;
        for (idx = 0;
            idx < sizeof(format_values) / sizeof(format_values[0]); idx++) {
            int size_written;
            size_written = snprintf(str_ptr, rest_of_buffer_size,
                format_values[idx].format, format_values[idx].value);
            rest_of_buffer_size -= size_written;
            str_ptr += size_written;
        }
        snprintf(str_ptr, rest_of_buffer_size, end_of_desc);
        *descriptor = descriptor_0;
        *descriptor_length = buffer_size; 
    }
    return result;
}

/**
 * set username
 */
int
credential_desc_set_username(
    credential_desc* obj,
    const char* username)
{
    int result;
    result = 0;
    result = credential_desc_set_field_0(
        &obj->username, username, strlen(username));

    return result;
}



/**
 * set password
 */
int
credential_desc_set_password(
    credential_desc* obj,
    const char* password)
{
    int result;
    result = 0;
    result = credential_desc_set_field_0(
        &obj->password, password, strlen(password));

    return result;
}

/**
 * set quit option
 */
int
credential_desc_set_quit(
    credential_desc* obj,
    int state)
{
    int result;
    result = 0;
    obj->quit = state;
    return result;
}


/**
 * free credential descriptor
 */
void
credential_desc_free(
    credential_desc* desc)
{
    if (desc) {
        credential_desc_set_field_0(&desc->protocol, NULL, 0);
        credential_desc_set_field_0(&desc->host, NULL, 0);
        credential_desc_set_field_0(&desc->path, NULL, 0);
        credential_desc_set_field_0(&desc->username, NULL, 0);
        credential_desc_set_field_0(&desc->password, NULL, 0);
        credential_i_free(desc);
    }
}

/**
 * free heap object from which you get in this interface.
 */
void
credential_desc_free_object(
    void* obj)
{
    credential_i_free(obj);
}


/**
 * set field
 */
int
credential_desc_set_field_0(
    char** field,
    const char* value,
    size_t value_length)
{
    int result;
    result = 0;
    if (*field != value) {
        size_t field_len;
        int do_copy;
        if (*field) {
            field_len = strlen(*field);
        } else {
            field_len = 0;
        } 
        do_copy = *field != value;
        if (do_copy) {
            char* new_field;
            if (value_length) {
                new_field = credential_i_alloc(value_length + 1);
                if (new_field) {
                    memcpy(new_field, value, value_length);
                    new_field[value_length] = '\0';
                } else {
                    result = -1;
                }
            } else {
                new_field = NULL;
            }
            if (result == 0) {
                if (*field) {
                    credential_i_free(*field);
                }
                *field = new_field;
            }
        }
    }
    return result;
}

/**
 * find end of line
 */
static const char*
credential_desc_find_end_of_line(
    const char* descriptor,
    size_t descriptor_length)
{
    const char* ptr;
    const char* result;
    size_t i;
    result = NULL;
    ptr = descriptor;
    for (i = 0; i < descriptor_length; i++, ptr++) {
        if (isspace(*ptr)) {
            result = ptr;
            break;
        }
    }
    return result;
}

/**
 * find start of line
 */
static const char*
credential_desc_find_start_of_line(
    const char* descriptor,
    size_t descriptor_length)
{
    const char* ptr;
    const char* result;
    size_t i;
    result = NULL;
    ptr = descriptor;
    for (i = 0; i < descriptor_length; i++, ptr++) {
        if (!isspace(*ptr)) {
            result = ptr;
            break;
        }
    }
    return result;
}

/**
 * allocate credential descriptor
 */
credential_desc*
credential_desc_alloc()
{
    credential_desc* result;
    result = (credential_desc*)credential_i_alloc(sizeof(credential_desc));
    if (result) {
        memset(result, 0, sizeof(credential_desc));
    }
    return result;
}



/* vi: se ts=4 sw=4 et: */
